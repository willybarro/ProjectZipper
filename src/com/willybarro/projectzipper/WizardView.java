/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WizardView.java
 *
 * Created on Jun 19, 2011, 12:45:51 AM
 */
package com.willybarro.projectzipper;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author willy
 */
public class WizardView extends javax.swing.JFrame {

    /** Creates new form WizardView */
    public WizardView() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        inputPath = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        cbExportZip = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        inputFilepatterns = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbSvn = new javax.swing.JCheckBox();
        cbGit = new javax.swing.JCheckBox();
        cbHtaccess = new javax.swing.JCheckBox();
        cbDotFilesAndDirectories = new javax.swing.JCheckBox();
        cbNbProject = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnClose = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        labelExporting = new javax.swing.JLabel();
        labelExporting.setVisible(false);

        setResizable(false);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(323, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(275, 275, 275))
        );

        jLabel2.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.jLabel2.text")); // NOI18N

        inputPath.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.inputPath.text")); // NOI18N

        btnBrowse.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.btnBrowse.text")); // NOI18N
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        cbExportZip.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.cbExportZip.text")); // NOI18N
        cbExportZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbExportZipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputPath, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbExportZip)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbExportZip)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel3.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.jLabel4.text")); // NOI18N

        inputFilepatterns.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.inputFilepatterns.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.jLabel5.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.jLabel6.text")); // NOI18N

        cbSvn.setSelected(true);
        cbSvn.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.cbSvn.text")); // NOI18N

        cbGit.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.cbGit.text")); // NOI18N

        cbHtaccess.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.cbHtaccess.text")); // NOI18N

        cbDotFilesAndDirectories.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.cbDotFilesAndDirectories.text")); // NOI18N
        cbDotFilesAndDirectories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDotFilesAndDirectoriesActionPerformed(evt);
            }
        });

        cbNbProject.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.cbNbProject.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(inputFilepatterns, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(cbSvn)
                                .addGap(18, 18, 18)
                                .addComponent(cbGit)
                                .addGap(18, 18, 18)
                                .addComponent(cbHtaccess))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(cbDotFilesAndDirectories)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbNbProject)))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(inputFilepatterns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSvn)
                    .addComponent(cbGit)
                    .addComponent(cbHtaccess))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDotFilesAndDirectories)
                    .addComponent(cbNbProject)))
        );

        btnClose.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.btnClose.text")); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnExport.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.btnExport.text")); // NOI18N
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        helpButton.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.helpButton.text")); // NOI18N
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        labelExporting.setText(org.openide.util.NbBundle.getMessage(WizardView.class, "WizardView.labelExporting.text")); // NOI18N
        labelExporting.setFocusable(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(helpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                        .addComponent(labelExporting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnExport)
                    .addComponent(helpButton)
                    .addComponent(labelExporting))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retval = fileChooser.showOpenDialog(this);
        
        if(retval == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            
            // Data
            String fileDate = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
            
            // Filename
            String fileName = ProjectHelper.getMainProjectSanitizedName();
            String fileOutPath = filePath + "/" + fileName + "_" + fileDate;
            
            // If we'll export to .zip, append extension
            if(getCbExportZip().isSelected()) {
                fileOutPath += ".zip";
            } else {
                fileOutPath += "/";
            }
            
            // Updates text input
            inputPath.setText(fileOutPath);
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Project Zipper v"+ Wizard.version +"\n\nSource code, issues and discussion on:\nhttp://github.com/willybarro/ProjectZipper\n\nCreated by Willy Barro");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        if(Zipper.isTaskRunning()) {
            WizardController.getDefault().stopBuildAction();
        } else {
            WizardController.getDefault().startBuildAction();
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void cbDotFilesAndDirectoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDotFilesAndDirectoriesActionPerformed
        
        if(cbDotFilesAndDirectories.isSelected()) {
            cbSvn.setSelected(false);
            cbSvn.setEnabled(false);
            
            cbGit.setSelected(false);
            cbGit.setEnabled(false);
            
            cbHtaccess.setSelected(false);
            cbHtaccess.setEnabled(false);
        } else {
            cbSvn.setEnabled(true);
            cbGit.setEnabled(true);
            cbHtaccess.setEnabled(true);
        }
    }//GEN-LAST:event_cbDotFilesAndDirectoriesActionPerformed

    private void cbExportZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbExportZipActionPerformed
        String text = getInputPath().getText();
        
        // If user selected to export to zip, we need to add .zip in the input path
        if(cbExportZip.isSelected()) {
            // If it doesn't have .zip at the end, add it.
            if( !text.equals("") && !text.toLowerCase().endsWith(".zip") ) {
                // If we have an ending slash, remove it.
                if(text.charAt(text.length()-1) == '/') {
                    text = text.substring(0, text.length()-1);
                }
                String newText = text + ".zip";
                getInputPath().setText(newText);
            }
        } else {
        // If user selected to export on a path, we need to remove the .zip and add "/" in the end of the input path
            // If it have .zip at the end, remove it
            if( !text.equals("") && text.toLowerCase().endsWith(".zip") ) {
                String newText = text.replace(".zip", "") + "/";
                getInputPath().setText(newText);
            }
        }
        
    }//GEN-LAST:event_cbExportZipActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WizardView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnExport;
    private javax.swing.JCheckBox cbDotFilesAndDirectories;
    private javax.swing.JCheckBox cbExportZip;
    private javax.swing.JCheckBox cbGit;
    private javax.swing.JCheckBox cbHtaccess;
    private javax.swing.JCheckBox cbNbProject;
    private javax.swing.JCheckBox cbSvn;
    private javax.swing.JButton helpButton;
    private javax.swing.JTextField inputFilepatterns;
    private javax.swing.JTextField inputPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelExporting;
    // End of variables declaration//GEN-END:variables

    public void setBtnExportIsLoading(boolean isLoading) {
        if(isLoading) {
            labelExporting.setVisible(true);
            btnExport.setText("Cancel...");
        } else {
            labelExporting.setVisible(false);
            btnExport.setText("Export");
        }
    }

    public ArrayList<IgnorePattern> getIgnorePatterns()
    {
        ArrayList<IgnorePattern> ignorePatterns = new ArrayList<IgnorePattern>();
        
        // Input wrote patterns
        String textInputPatterns = getInputFilepatterns().getText();
        if(!textInputPatterns.isEmpty()) {
            String[] inputPatterns = textInputPatterns.split(",");
            
            for(String p : inputPatterns) {
                IgnorePattern ip = IgnorePattern.factory(p.trim(), Ignore.IGNORE_BOTH);
                ignorePatterns.add(ip);
            }
        }
        
        // Checkboxes
        ignorePatterns.add(getCbSvn());
        ignorePatterns.add(getCbGit());
        ignorePatterns.add(getCbHtaccess());
        ignorePatterns.add(getCbDotFilesAndDirectories());
        ignorePatterns.add(getCbNbProject());
        
        return ignorePatterns;
    }

    public IgnorePattern getCbDotFilesAndDirectories() {
        if(cbDotFilesAndDirectories.isSelected()) {
            return IgnorePattern.factory(".*", Ignore.IGNORE_BOTH);
        } else {
            return null;
        }
    }

    public IgnorePattern getCbGit() {
        if(cbGit.isSelected()) {
            return IgnorePattern.factory(".git", Ignore.IGNORE_DIRECTORY);
        } else {
            return null;
        }
    }

    public IgnorePattern getCbHtaccess() {
        if(cbHtaccess.isSelected()) {
            return IgnorePattern.factory(".htaccess", Ignore.IGNORE_FILE);
        } else {
            return null;
        }
    }

    public IgnorePattern getCbSvn() {
        if(cbSvn.isSelected()) {
            return IgnorePattern.factory(".svn", Ignore.IGNORE_DIRECTORY);
        } else {
            return null;
        }
    }
    
    public IgnorePattern getCbNbProject() {
        if(cbNbProject.isSelected()) {
            return IgnorePattern.factory("nbproject", Ignore.IGNORE_DIRECTORY);
        } else {
            return null;
        }
    }

    public JCheckBox getCbExportZip() {
        return cbExportZip;
    }

    public JTextField getInputFilepatterns() {
        return inputFilepatterns;
    }

    public JTextField getInputPath() {
        return inputPath;
    }
}